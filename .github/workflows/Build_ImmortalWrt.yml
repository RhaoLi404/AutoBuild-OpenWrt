# Copyright (c) 2019-2020 P3TERX <https://p3terx.com>
#
# This is free software, licensed under the MIT License.
# See /LICENSE for more information.
#
# https://github.com/P3TERX/Actions-OpenWrt
# Description: Build OpenWrt using GitHub Actions
# Modified for ImmortalWrt/immortalwrt

name: 云编译_ImmortalWrt

on:
  repository_dispatch:
  workflow_dispatch:
    inputs:
      model:
        description: '选择机型'
        required: true
        default: 'mtk-deprecated' 
        type: choice
        options:
          - 'TEST'
          - 'mtk-deprecated'
          - 'NX30Pro'
          - 'abt_asr3000'
          - 'X86'
      UPLOAD_BIN_DIR:
        type: boolean
        description: '上传bin文件夹'
        required: false
        default: 'false'
      UPLOAD_FIRMWARE:
        type: boolean
        description: '上传固件'
        required: false
        default: 'true'
      UPLOAD_RELEASE:
        type: boolean
        description: '上传RELEASE'
        required: false
        default: 'true'
      UPLOAD_CLOUDREVE:
        type: boolean
        description: '上传固件和日志到Cloudreve'
        required: false
        default: 'true'  # 默认上传到Cloudreve
      
      ssh:
        description: 'SSH connection to Actions'
        required: false
        default: 'false'
        type: boolean
#   schedule:                           # 时间表
#     - cron: '0 19 * * *'              # 每天国际时间19点，北京时间凌晨3点执行(北京+8)
#  push: # push 操作
#    branches: # 分支
      #- master # 主分支
    #   paths:                            # 路径
    #     - openwrt/*                     # 监听openwrt目录下所有文件的push操作
    #paths: # 路径
      #- logs/g-dock.md # 监听logs目录下 k2.md 的push操作
  # watch:                              # 监视操作
  #   types: [started]                  # 点击 star 之后
  
env:
  REPO_URL: https://github.com/hanwckf/immortalwrt-mt798x
  REPO_BRANCH: openwrt-21.02
  FEEDS_CONF: feeds.conf.default
  CONFIG_FILE: config/ImmortalWrt/ImmortalWrt_${{ github.event.inputs.model }}.config
  DIY_P1_SH: diy-part1.sh
  DIY_P2_SH: diy-part2.sh
  UPLOAD_BIN_DIR: true
  UPLOAD_FIRMWARE: true
  UPLOAD_COWTRANSFER: false
#  UPLOAD_WETRANSFER: false
  UPLOAD_RELEASE: true
  TZ: Asia/Shanghai

jobs:
  build:
    runs-on: ubuntu-22.04

    steps:
    - name: 检查容器
      uses: actions/checkout@main

    - name: 初始化环境
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo rm -rf /etc/apt/sources.list.d/* /usr/share/dotnet /usr/local/lib/android /opt/ghc
        sudo -E apt-get -qq update
        sudo -E apt-get -qq install ack antlr3 asciidoc autoconf automake autopoint binutils bison build-essential \
        bzip2 ccache cmake cpio curl device-tree-compiler fastjar flex gawk gettext gcc-multilib g++-multilib \
        git gperf haveged help2man intltool libc6-dev-i386 libelf-dev libglib2.0-dev libgmp3-dev libltdl-dev \
        libmpc-dev libmpfr-dev libip4tc2 libncurses5-dev libncursesw5-dev libreadline-dev libssl-dev libtool lrzsz \
        mkisofs msmtp nano ninja-build p7zip p7zip-full patch pkgconf python2.7 python3 python3-pyelftools \
        libpython3-dev qemu-utils rsync scons squashfs-tools subversion swig texinfo uglifyjs upx-ucl unzip \
        vim wget xmlto xxd zlib1g-dev python3-setuptools clang
        sudo add-apt-repository ppa:ubuntu-toolchain-r/test
        sudo add-apt-repository ppa:ubuntu-toolchain-r/ppa
        sudo apt-get install -y gcc-13
        sudo apt-get install -y g++-13
        sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-13 60 --slave /usr/bin/g++ g++ /usr/bin/g++-13
        sudo timedatectl set-timezone "$TZ"
        sudo mkdir -p /workdir
        sudo chown $USER:$GROUPS /workdir

    - name: 拉取源码
      working-directory: /workdir
      run: |
        df -hT $PWD
        git clone $REPO_URL -b $REPO_BRANCH immortalwrt
        ln -sf /workdir/immortalwrt $GITHUB_WORKSPACE/immortalwrt

    - name: 运行第一脚本
      run: |
        [ -e $FEEDS_CONF ] && mv $FEEDS_CONF immortalwrt/feeds.conf.default
        chmod +x $DIY_P1_SH
        cd immortalwrt
        $GITHUB_WORKSPACE/$DIY_P1_SH

    - name: 更新插件
      run: |
        cd immortalwrt
        ./scripts/feeds update -a
        rm -rf feeds/packages/net/{brook,hysteria,xray-core,xray-plugin,haproxy,naiveproxy,shadowsocksr-libev,shadowsocks-rust,shadowsocks-libev,simple-obfs,trojan,trojan-go,trojan-plus,tuic-client,ua2f} \
               feeds/packages/devel/gn


    - name: 安装插件
      run: |
        cd immortalwrt
        ./scripts/feeds install -p luci -a
        ./scripts/feeds install -p routing -a
        ./scripts/feeds install -p telephony -a
        ./scripts/feeds install -p helloworld shadowsocks-libev
        ./scripts/feeds install -p kenzo UnblockNeteaseMusic luci-app-advanced luci-app-argone-config luci-app-design-config luci-app-easymesh luci-app-eqos luci-app-ikoolproxy luci-app-istorex luci-app-lucky luci-app-partexp luci-app-quickstart luci-app-store luci-app-wechatpush luci-lib-taskd luci-lib-xterm luci-theme-argone luci-theme-atmaterial_new luci-theme-ifit luci-theme-opentopd luci-theme-tomato quickstart taskd
        ./scripts/feeds install -p small brook chinadns-ng dns2socks dns2tcp gn hysteria ipt2socks lua-neturl luci-app-bypass luci-app-fchomo luci-app-homeproxy luci-app-mosdns luci-app-nikki luci-app-openclash luci-app-passwall luci-app-passwall2 luci-app-ssr-plus microsocks mihomo mosdns naiveproxy nikki pdnsd-alt redsocks2 shadow-tls shadowsocks-rust shadowsocksr-libev simple-obfs sing-box ssocks tcping trojan trojan-go trojan-plus v2dat
        ./scripts/feeds install -p small8 LingTiGameAcc MentoHUST-OpenWrt-ipk UA2F UnblockNeteaseMusic-Go airconnect alac aliyundrive-fuse amule aria2 ariang autoshare-ksmbd autoshare-samba autoupdate baidupcs-web base-files btop cdnspeedtest cgroupfs-mount coremark cpulimit cups cxxopts dae daed-next daed dnsforwarder dnsmasq dnsproxy docker dockerd ffmpeg-remux ffmpeg-static firewall firewall4 floatip frp fullconenat-nft fullconenat gmediarender go-aliyundrive-webdav haproxy headscale homebox homeredirect iptvhelper istoreenhance jpcre2 libcron libdouble-conversion libnftnl libtorrent-rasterbar linkease linkmount lua-ipops luci-app-3ginfo-lite luci-app-LingTiGameAcc luci-app-UUGameAcc luci-app-airconnect luci-app-aliyundrive-fuse luci-app-alpha-config luci-app-amlogic luci-app-ap-modem luci-app-arcadia luci-app-autoipsetaddel luci-app-autorepeater luci-app-autoshell luci-app-autotimeset luci-app-autoupdate luci-app-baidupcs-web luci-app-bandwidthd luci-app-beardropper luci-app-bmtedge luci-app-chatgpt-web luci-app-chinesesubfinder luci-app-chongyoung luci-app-chongyoung2.0 luci-app-clouddrive2 luci-app-cloudflarespeedtest luci-app-codeserver luci-app-control-timewol luci-app-control-webrestriction luci-app-control-weburl luci-app-cupsd luci-app-daed-next luci-app-daed luci-app-dnscrypt-proxy2 luci-app-dnsfiltel luci-app-dnsmasq-ipset luci-app-dnsproxy luci-app-dogcom luci-app-drawio luci-app-easytier luci-app-easyupdate luci-app-emby luci-app-eqosplus luci-app-excalidraw luci-app-fakemesh luci-app-feishuvpn luci-app-floatip luci-app-fullconenat luci-app-gecoosac luci-app-go-aliyundrive-webdav luci-app-godproxy luci-app-gogs luci-app-gowebdav luci-app-guest-wifi luci-app-heimdall luci-app-homeassistant luci-app-homebridge luci-app-htreader luci-app-immich luci-app-internet-detector luci-app-iperf3-server luci-app-ipsec-server luci-app-iptvhelper luci-app-istoredup luci-app-istorego luci-app-istorepanel luci-app-ittools luci-app-jackett luci-app-jellyfin luci-app-kodexplorel luci-app-koolproxyR luci-app-lanraragi luci-app-linkease luci-app-mac luci-app-macvlan luci-app-mail luci-app-memos luci-app-mentohust luci-app-mfun luci-app-minieap luci-app-msd_lite luci-app-mtphotos luci-app-multiaccountdia luci-app-mymind luci-app-nastools luci-app-natmap luci-app-natter luci-app-natter2 luci-app-navidrome luci-app-nekobox luci-app-netdata luci-app-netkeeper-interceptior luci-app-netspeedtest luci-app-nextcloud luci-app-nginx-manager luci-app-nginx-pingos luci-app-npc luci-app-oaf luci-app-oled luci-app-oneapi luci-app-onliner luci-app-openvpn-client luci-app-openvpn-server luci-app-openwebui luci-app-ota luci-app-owntone luci-app-packet-capture luci-app-penpot luci-app-photoprism luci-app-plex luci-app-poweroff luci-app-poweroffdevice luci-app-pppoe-relay luci-app-pppoe-server luci-app-pptp-server luci-app-pushbot luci-app-pve luci-app-qbittorrent luci-app-ramfree luci-app-routerdog luci-app-rtbwmon luci-app-rtorrent luci-app-runmynas luci-app-shanligong luci-app-shortcutmenu luci-app-shutdown luci-app-sms-tool luci-app-socat luci-app-softethervpn luci-app-speedtest-web luci-app-ssr-mudb-server luci-app-sunpanel luci-app-supervisord luci-app-suselogin luci-app-syncthing luci-app-systools luci-app-sysuh3c luci-app-tailscale luci-app-tcpdump luci-app-tencentcloud-cos luci-app-tencentddns luci-app-timecontrol luci-app-tinyfilemanager luci-app-torbp luci-app-transmission luci-app-ttnode luci-app-typecho luci-app-ubuntu luci-app-ubuntu2 luci-app-udp2raw luci-app-unblockmusic luci-app-unifi luci-app-unishare luci-app-usb-printel luci-app-usb3disable luci-app-v2raya luci-app-vaultwarden luci-app-verysync luci-app-vlmcsd luci-app-wan-mac luci-app-webd luci-app-webviewdev luci-app-webvirtcloud luci-app-wifidog luci-app-wizard luci-app-wolplus luci-app-wrtbwmon luci-app-wxedge luci-app-xlnetacc luci-app-xray luci-app-xteve luci-app-xunlei luci-app-xunyou luci-lib-fs luci-lib-iform luci-nginxer luci-proto-minieap luci-proto-netkeeper luci-theme-atmateria_new luci-theme-edge luci-theme-inas lucj-theme-kucat luci-themedog mentohust mhz miniupnpd-iptables msd_lite msmtp mwan3 nanohatoled natflow natter natter2 netatalk netkeeper-interception netkeeper netmaker nftables nginx ngroko njitclient nps open-app-filter openvpn-easy-rsa-whisky openwrt-minieap openwrt-minisign opkg oscam pgyvpn phtunnel ppp qbittorrent qt6base qt6tools quickjspp rapidjson rblibtorrent routergo rp-pppoe scutclient sms-tool speedtestcli sub-web subconverter sunpanel sysuh3c tailscale tcpping toml11 transmission-web-contro transmission udp2raw unishare upx-static upx uwsgi verysync vlmcsd vmease vsftpd watchcat webdav2 wireless-regdb wrtbwmon wxbase xunyou
        ./scripts/feeds install -p packages ShadowVPN aardvark-dns acme-acmesh acme-common acme adblock-fast adblock addrwatch aggregate aircrack-ng announce antiblock apache apcupsd apfree-wifidog apinger arp-scan atftp atlas-probe atlas-sw-probe autossh banip basicstation bcp38 beanstalkd bfdd bind bitlbee bitsrunlogin-go bmon boinc-wrapper boinc bonding bpfcountd bridge-utils bwm-ng bwping cgi-io chaosvpn chrony cifs-utils clamav cloudflared cloudreve cni-route-override conntrack-tools conservel coova-chilli croc crowdsec-firewall-bouncer crowdsec cshark curl dante darkstat databag davfs2 dawn dcstad dcwapd ddns-scripts_aliyun ddns-scripts_dnspod dhcp-forwardel dhcpcd dhtd dmapd dns-over-https dnscrypt-proxy dnscrypt-proxy2 dnsdist dnslookup dnstap dnstop dufs dynapoint eoip esniper esp2net etebase etherwake-nfqueue etherwake evilginx2 external-protocol fail2ban fakeidentd fakepop family-dns fastd flent foolsm fping freeradius3 fr fsh fwknop gateway-go gatling gensio geoip-shell geoipupdate geoview 9g git-Ifs git gitolite gnunet-fuse gnunet go-nats go-wol gping gsocket hcxdumptool hcxtools hev-socks5-server hev-socks5-tproxy hev-socks5-tunnel horst hping3 hs20 htpdate httping https-dns-proxy httptunnel i2pd ibrdtn-tools ibrdtnd ieee8021xclient ifstat iftop igmpproxy inadyn iodine iperf iperf3 ipset-lists iptraf-ng iputils ipvsadm irssi irtt isc-dhcp jool kadnode kafs-client kcptun kea keepalived knot-resolver knot knxd kplex krb5 ksmbd-tools lcdringer leech Iftp libcurl-gnutls libndp librespeed-go libreswan lighttpd linknx linuxptp Iksctp-tools lora-gateway-hal lynx mac-telnet maccalc mbusd mdio-tools mdns-repeater mdnsrespondel memcached mikrotik-btest minisnmpd miniupnpc modemband modemmanager mosh mosquitto mptcpd mrmctl msdlite mtr mwol n2n nbd ncp nebula net-mtools net-snmp net-tools netavark netbird netcat netdiscover netifyd netopeer2 netperf netsniff-ng netstinky nextdns nexttrace nfdump nfs-kernel-server nft-qos nginx-util ngircd njitclient nlbwmon nmap nqptp nsd ntpd ntripcaster ntripclient ntripserver nut obfs4proxy ocserv ola onionshare-cli oor open-iscsi open-isns openappid openconnect openelp openfortivpn openssh openthread-br opentracker openvpn-easy-rsa openvpn openvswitch ostiary overture ovn ovsd owipcalc p910nd pagekitec pandownload-fake-serve pbr pdns-recursor pdns pen phantap pingcheck pixiewps port-mirroring pppossh pptpd privoxy prosody proxychains-ng ps3netsrv ptunnel-ng q qBittorrent-Enhanced-Edition qcsuper quectel-cm radicale radicale2 radsecproxy ratched ratechecker rclone-ng rclone-webui-react rclone reaver redsocks remserial respondd restic-rest-server rpcbind rsync rustdesk-server safe-search samba4 samplicator scapy ser2net shorewall-core shorewall-lite shorewall shorewall6-lite shorewall6 sit slirp4netns smcroute snort3 snowflake softethervpn5 softflowd spawn-fcgi speedtest-cli speedtest-go speedtest-netperf speedtestcpp spoofer sqm-scripts squid srelay sscep sshfs sshtunnel sslh sstp-client static-neighbor-reports strongswan stubby stunnel subversion switchdev-poller sysrepo tac_plus tcping-simple tcpproxy tcpreplay telnet-bsd tgt tinc tinyfecvpn tinyportmapper tinyproxy tmate-ssh-server tmate tor-hs tor torsocks trafficshaper transfer transmission-web-control travelmate tuic-server tunneldigger-broker tunneldigger u2pnpd uacme uanytun udhcpsnoop udp-broadcast-relay-redux-openwrt udphp-client udpspeeder udptunnel ulogd umurmul unbound uradvd usbip uspot usteer vallumd vnstat vnstat2 vpnc-scripts vpnc wakeonlan wavemon webui-aria2 wib-ng wg-installer wget wgsd wifi-presence wsdd2 xfrpc xinetd xl2tpd xtables-addons yggdrasil-jumper yggdrasil zerotier znc ztdns

    - name: 运行第二脚本
      run: |
        [ -e files ] && mv files immortalwrt/files
        [ -e $CONFIG_FILE ] && mv $CONFIG_FILE immortalwrt/.config
        chmod +x $DIY_P2_SH
        cd immortalwrt
        $GITHUB_WORKSPACE/$DIY_P2_SH

    - name: SSH 自动化
      uses: P3TERX/ssh2actions@v1.0.0
      if: (github.event.inputs.ssh == 'true' && github.event.inputs.ssh  != 'false') || contains(github.event.action, 'ssh')
      env:
        TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
        TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}

    - name: 下载插件包
      id: package
      run: |
        cd immortalwrt
        make defconfig
        make download -j8
        find dl -size -1024c -exec ls -l {} \;
        find dl -size -1024c -exec rm -f {} \;


    - name: 编译固件
      id: compile
      run: |
        cd immortalwrt
        echo -e "$(nproc) thread compile"
        make clean
        make -j$(nproc) || make -j1 || make -j1 V=s
        echo "status=success" >> $GITHUB_OUTPUT
        grep '^CONFIG_TARGET.*DEVICE.*=y' .config | sed -r 's/.*DEVICE_(.*)=y/\1/' > DEVICE_NAME
        [ -s DEVICE_NAME ] && echo "DEVICE_NAME=_$(cat DEVICE_NAME)" >> $GITHUB_ENV
        echo "FILE_DATE=_$(date +"%Y%m%d%H%M")" >> $GITHUB_ENV

    - name: 检查空间使用情况
      if: (!cancelled())
      run: | 
        df -hT
        
    - name: 上传bin目录
      uses: actions/upload-artifact@main
      if: steps.compile.outputs.status == 'success' && github.event.inputs.UPLOAD_BIN_DIR == 'true' && !cancelled()
      with:
        name: ImmortalWrt_bin${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
        path: immortalwrt/bin

    - name: 整理文件
      id: organize
      if: steps.compile.outputs.status == 'success' && !cancelled()
      run: |
        cd immortalwrt/bin/targets/*/*
        rm -rf packages
        echo "FIRMWARE=$PWD" >> $GITHUB_ENV
        echo "status=success" >> $GITHUB_OUTPUT

    - name: 上传固件目录
      uses: actions/upload-artifact@main
      if: steps.organize.outputs.status == 'success' && github.event.inputs.UPLOAD_FIRMWARE == 'true' && !cancelled()
      with:
        name: ImmortalWrt_firmware${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
        path: ${{ env.FIRMWARE }}

    - name: 生成发布标签
      id: tag
      if: github.event.inputs.UPLOAD_RELEASE == 'true' && !cancelled()
      run: |
        echo "release_tag=$(date +"%Y.%m.%d-%H%M")-${{ github.event.inputs.model }}" >> $GITHUB_OUTPUT
        touch release.txt
        echo "status=success" >> $GITHUB_OUTPUT

    - name: 固件发布
      uses: softprops/action-gh-release@v2.0.4
      if: steps.tag.outputs.status == 'success' && !cancelled()
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.tag.outputs.release_tag }}
        body_path: release.txt
        files: ${{ env.FIRMWARE }}/*


    - name: 设置WebDAV目标目录
      run: |
        if [[ "${{ github.event.inputs.UPLOAD_CLOUDREVE }}" == "true" ]]; then
          CURRENT_DATE=$(date +"%Y%m%d")
          DEVICE_MODEL="${{ github.event.inputs.model }}"
          TARGET_DIR="${CURRENT_DATE}/${DEVICE_MODEL}"  
          echo "检查WebDAV目标目录: $TARGET_DIR"
          if ! curl -u "${{ secrets.WEBDAV_USERNAME }}:${{ secrets.WEBDAV_PASSWORD }}" --head "${{ secrets.WEBDAV_URL }}/${TARGET_DIR}" | grep -q "200 OK"; then
            echo "目标目录不存在，正在创建..."
            curl -u "${{ secrets.WEBDAV_USERNAME }}:${{ secrets.WEBDAV_PASSWORD }}" -X MKCOL "${{ secrets.WEBDAV_URL }}/${TARGET_DIR}"
            echo "目录已创建: $TARGET_DIR"
          else
            echo "目标目录已存在: $TARGET_DIR"
          fi
          echo "TARGET_DIR=${TARGET_DIR}" >> $GITHUB_ENV
        fi

    - name: 上传文件至Cloudreve
      if: steps.organize.outputs.status == 'success' && github.event.inputs.UPLOAD_CLOUDREVE == 'true' && !cancelled()
      run: |
        UPLOAD_PATH="${{ env.FIRMWARE }}/*"
        LOGS_PATH="${{ runner.workspace }}/logs/*"
        
        # 上传固件文件
        echo "开始上传固件文件到Cloudreve..."
        for file in $UPLOAD_PATH; do
          if [[ -f $file ]]; then
            echo "上传文件: $file"
            curl -u "${{ secrets.WEBDAV_USERNAME }}:${{ secrets.WEBDAV_PASSWORD }}" -T "$file" "${{ secrets.WEBDAV_URL }}/${TARGET_DIR}/$(basename $file)"
          else
            echo "未找到文件: $file"
          fi
        done
        
        # 上传日志文件
        echo "开始上传日志文件到Cloudreve..."
        for log in $LOGS_PATH; do
          if [[ -f $log ]]; then
            echo "上传日志文件: $log"
            curl -u "${{ secrets.WEBDAV_USERNAME }}:${{ secrets.WEBDAV_PASSWORD }}" -T "$log" "${{ secrets.WEBDAV_URL }}/${TARGET_DIR}/$(basename $log)"
          else
            echo "未找到日志文件: $log"
          fi
        done

    - name: 删除工作流程运行
      uses: Mattraks/delete-workflow-runs@main
      with:
        retain_days: 7
        keep_minimum_runs: 4

    - name: 删除旧版本
      uses: dev-drprasad/delete-older-releases@master
      if: env.UPLOAD_RELEASE == 'true' && !cancelled()
      with:
        keep_latest: 8
        delete_tags: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
